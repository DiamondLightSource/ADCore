# This file was automatically generated
# *** Please do not edit this file: edit the source file instead. ***

# Group: NDPluginBase
record(stringin, "$(P)$(R)PluginType_RBV")
{
    field(DESC, "PluginType_RBV")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))PLUGIN_TYPE")
}

record(stringin, "$(P)$(R)NDArrayPort_RBV")
{
    field(DESC, "NDArrayPort")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))NDARRAY_PORT")
}

record(stringout, "$(P)$(R)NDArrayPort")
{
    field(DESC, "NDArrayPort")
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(VAL,  "$(NDARRAY_PORT)")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))NDARRAY_PORT")
}

record(longin, "$(P)$(R)NDArrayAddress_RBV")
{
    field(DESC, "NDArrayAddress")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))NDARRAY_ADDR")
}

record(longout, "$(P)$(R)NDArrayAddress")
{
    field(DESC, "NDArrayAddress")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(VAL,  "$(NDARRAY_ADDR=0)")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))NDARRAY_ADDR")
}

record(bi, "$(P)$(R)EnableCallbacks_RBV")
{
    field(DESC, "EnableCallbacks")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ENABLE_CALLBACKS")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(bo, "$(P)$(R)EnableCallbacks")
{
    field(DESC, "EnableCallbacks")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(VAL,  "$(ENABLED=0)")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
}

record(ai, "$(P)$(R)MinCallbackTime_RBV")
{
    field(DESC, "MinCallbackTime")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))MIN_CALLBACK_TIME")
    field(PREC, "3")
    field(EGU,  "s")
}

record(ao, "$(P)$(R)MinCallbackTime")
{
    field(DESC, "MinCallbackTime")
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(VAL,  "0.0")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))MIN_CALLBACK_TIME")
    field(PREC, "3")
    field(EGU,  "s")
    field(DRVL, "0")
}

record(longin, "$(P)$(R)QueueFree")
{
    field(DESC, "QueueFree")
    field(SCAN, "$(SCANRATE=I/O Intr)")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))QUEUE_FREE")
    field(LOLO, "0")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(HYST, "1")
}

record(longin, "$(P)$(R)QueueSize_RBV")
{
    field(DESC, "QueueSize")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(FLNK, "$(P)$(R)QueueFreeLow")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))QUEUE_SIZE")
}

record(longout, "$(P)$(R)QueueSize")
{
    field(DESC, "QueueSize")
    field(DTYP, "asynInt32")
    field(FLNK, "$(P)$(R)QueueFreeLow")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))QUEUE_SIZE")
}

record(ai, "$(P)$(R)ExecutionTime_RBV")
{
    field(DESC, "ExecutionTime_RBV")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EXECUTION_TIME")
    field(PREC, "3")
    field(EGU,  "ms")
}

record(longin, "$(P)$(R)DroppedArrays_RBV")
{
    field(DESC, "DroppedArrays")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DROPPED_ARRAYS")
}

record(longout, "$(P)$(R)DroppedArrays")
{
    field(DESC, "DroppedArrays")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(VAL,  "0")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DROPPED_ARRAYS")
}

record(bo, "$(P)$(R)ProcessPlugin")
{
    field(DESC, "ProcessPlugin")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(VAL,  "1")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))PROCESS_PLUGIN")
}

# Group: NDPluginBaseFull
record(longin, "$(P)$(R)DroppedOutputArrays_RBV")
{
    field(DESC, "DroppedOutputArrays")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DROPPED_OUTPUT_ARRAYS")
}

record(longout, "$(P)$(R)DroppedOutputArrays")
{
    field(DESC, "DroppedOutputArrays")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(VAL,  "0")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DROPPED_OUTPUT_ARRAYS")
}

record(ai, "$(P)$(R)MaxByteRate_RBV")
{
    field(DESC, "MaxByteRate")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))MAX_BYTE_RATE")
    field(PREC, "3")
    field(EGU,  "s")
}

record(ao, "$(P)$(R)MaxByteRate")
{
    field(DESC, "MaxByteRate")
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(VAL,  "0.0")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))MAX_BYTE_RATE")
    field(PREC, "3")
    field(EGU,  "s")
    field(DRVL, "0")
}

record(bi, "$(P)$(R)BlockingCallbacks_RBV")
{
    field(DESC, "BlockingCallbacks")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bo, "$(P)$(R)BlockingCallbacks")
{
    field(DESC, "BlockingCallbacks")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(VAL,  "0")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(longin, "$(P)$(R)NumThreads_RBV")
{
    field(DESC, "NumThreads")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))NUM_THREADS")
}

record(longout, "$(P)$(R)NumThreads")
{
    field(DESC, "NumThreads")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(VAL,  "1")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))NUM_THREADS")
}

record(longin, "$(P)$(R)MaxThreads_RBV")
{
    field(DESC, "MaxThreads_RBV")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))MAX_THREADS")
}

record(mbbi, "$(P)$(R)SortMode_RBV")
{
    field(DESC, "SortMode")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SORT_MODE")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Unsorted")
    field(ONST, "Sorted")
}

record(mbbo, "$(P)$(R)SortMode")
{
    field(DESC, "SortMode")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SORT_MODE")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Unsorted")
    field(ONST, "Sorted")
}

record(ai, "$(P)$(R)SortTime_RBV")
{
    field(DESC, "SortTime")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SORT_TIME")
    field(PREC, "3")
}

record(ao, "$(P)$(R)SortTime")
{
    field(DESC, "SortTime")
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(VAL,  "0.1")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SORT_TIME")
    field(PREC, "3")
}

record(longin, "$(P)$(R)SortFree")
{
    field(DESC, "SortFree")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SORT_FREE")
    field(LOLO, "0")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(HYST, "1")
}

record(longin, "$(P)$(R)SortSize_RBV")
{
    field(DESC, "SortSize")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(FLNK, "$(P)$(R)SortFreeLow")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SORT_SIZE")
}

record(longout, "$(P)$(R)SortSize")
{
    field(DESC, "SortSize")
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(FLNK, "$(P)$(R)SortFreeLow")
    field(VAL,  "20")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SORT_SIZE")
}

record(longin, "$(P)$(R)DisorderedArrays_RBV")
{
    field(DESC, "DisorderedArrays")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DISORDERED_ARRAYS")
}

record(longout, "$(P)$(R)DisorderedArrays")
{
    field(DESC, "DisorderedArrays")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))DISORDERED_ARRAYS")
}

$(PVI=#)record(waveform, "$(P)$(R)PVI")
$(PVI=#){
$(PVI=#)    field(DTYP, "copyInfo")
$(PVI=#)    info(copyInfo, {
$(PVI=#)        "label": "NDPluginBase",
$(PVI=#)        "children": [
$(PVI=#)            {
$(PVI=#)                "type": "Group",
$(PVI=#)                "name": "NDPluginBase",
$(PVI=#)                "layout": {
$(PVI=#)                    "type": "Grid"
$(PVI=#)                },
$(PVI=#)                "children": [
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalR",
$(PVI=#)                        "name": "PluginType",
$(PVI=#)                        "pv": "PluginType_RBV",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextRead"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "NDArrayPort",
$(PVI=#)                        "pv": "NDArrayPort",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "NDArrayAddress",
$(PVI=#)                        "pv": "NDArrayAddress",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "EnableCallbacks",
$(PVI=#)                        "pv": "EnableCallbacks",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "CheckBox"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "MinCallbackTime",
$(PVI=#)                        "pv": "MinCallbackTime",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalR",
$(PVI=#)                        "name": "QueueFree",
$(PVI=#)                        "pv": "QueueFree",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextRead"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "QueueSize",
$(PVI=#)                        "pv": "QueueSize",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalR",
$(PVI=#)                        "name": "ExecutionTime",
$(PVI=#)                        "pv": "ExecutionTime_RBV",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextRead"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "DroppedArrays",
$(PVI=#)                        "pv": "DroppedArrays",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalW",
$(PVI=#)                        "name": "ProcessPlugin",
$(PVI=#)                        "pv": "ProcessPlugin",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "CheckBox"
$(PVI=#)                        }
$(PVI=#)                    }
$(PVI=#)                ]
$(PVI=#)            },
$(PVI=#)            {
$(PVI=#)                "type": "Group",
$(PVI=#)                "name": "NDPluginBaseFull",
$(PVI=#)                "layout": {
$(PVI=#)                    "type": "Grid"
$(PVI=#)                },
$(PVI=#)                "children": [
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "DroppedOutputArrays",
$(PVI=#)                        "pv": "DroppedOutputArrays",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "MaxByteRate",
$(PVI=#)                        "pv": "MaxByteRate",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "BlockingCallbacks",
$(PVI=#)                        "pv": "BlockingCallbacks",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "CheckBox"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "NumThreads",
$(PVI=#)                        "pv": "NumThreads",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalR",
$(PVI=#)                        "name": "MaxThreads",
$(PVI=#)                        "pv": "MaxThreads_RBV",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextRead"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "SortMode",
$(PVI=#)                        "pv": "SortMode",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "ComboBox"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "SortTime",
$(PVI=#)                        "pv": "SortTime",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalR",
$(PVI=#)                        "name": "SortFree",
$(PVI=#)                        "pv": "SortFree",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextRead"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "SortSize",
$(PVI=#)                        "pv": "SortSize",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    },
$(PVI=#)                    {
$(PVI=#)                        "type": "SignalRW",
$(PVI=#)                        "name": "DisorderedArrays",
$(PVI=#)                        "pv": "DisorderedArrays",
$(PVI=#)                        "widget": {
$(PVI=#)                            "type": "TextWrite"
$(PVI=#)                        }
$(PVI=#)                    }
$(PVI=#)                ]
$(PVI=#)            }
$(PVI=#)        ]
$(PVI=#)    })
$(PVI=#)}
